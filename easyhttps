#!/bin/bash

if [ "$EUID" -ne 0 ]
  then echo "This script must be run as root!"
  exit
fi

while getopts 'e:d:p:t' flag; do
  case "${flag}" in
    e) EMAIL="${OPTARG}" ;;
    d) DOMAIN="${OPTARG}" ;;
    p) PORT="${OPTARG}" ;;
    t) TOS="yes" ;;
  esac
done

DIALOG_TITLE="HTTPS Setup"

install() {
    DISTRO=$(grep ^NAME /etc/os-release | sed 's/NAME=//g' | tr -d '="\n' | awk '{print $1;}')

    [ "$DISTRO" = "Ubuntu" ] && ubuntu_install ||
    [ "$DISTRO" = "Debian" ] && debian_install ||


    echo "Sorry! This script doesn't support this platform. "
}

setup_certbot() {
    STEP=certbot
    certbot --nginx --email "$EMAIL" -d "$DOMAIN" -n --agree-tos || die certbotsetup

    # install crontab if not already installed
    crontab -l | grep -q "15 02 * * * `which certbot` renew" || autorenew_crontab
}

autorenew_crontab() {
    (crontab -l 2>/dev/null; echo "15 02 * * * `which certbot` renew --pre-hook \"service nginx stop\" --post-hook \"service nginx start\"") | crontab -
}

whiptail_ask() {
    if [ -z "$EMAIL" ]; then
        EMAIL=$(whiptail --inputbox "Enter your email (used by certbot for urgent renewal and security notices)" 8 78 --title "$DIALOG_TITLE" 3>&1 1>&2 2>&3)

        if [ $? -ne 0 ]; then
            whiptail --title "$DIALOG_TITLE" --msgbox "You must provide an email!" 8 78
            exit
        fi
    fi

    if [ -z "$DOMAIN" ]; then
        DOMAIN=$(whiptail --inputbox 'Enter your domain (NOT IP!) that points to this IP (comma separated)' 8 78 --title "$DIALOG_TITLE" 3>&1 1>&2 2>&3)

        if [ $? -ne 0 ]; then
            whiptail --title "$DIALOG_TITLE" --msgbox "You must provide domain(s)!" 8 78
            exit
        fi
    fi

    if [ -z "$TOS" ]; then
        if (whiptail --title "$DIALOG_TITLE" --yesno "Please read the Terms of Service at https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must agree in order to register with the ACME server at https://acme-v01.api.letsencrypt.org/directory. Select YES to accept the ToS." 11 78) then
            echo "TOS Agreed!"
        else
            whiptail --title "$DIALOG_TITLE" --msgbox "You must accept the Terms of Service to use CertBot!" 8 78
            exit
        fi
    fi

    if [ -z "$PORT" ]; then
        PORT=$(whiptail --inputbox 'Enter your current node API port. HTTPS will be availiable on port 443.' 8 78 --title "$DIALOG_TITLE" "14265" 3>&1 1>&2 2>&3)

        if [ $? -ne 0 ]; then
            whiptail --title "$DIALOG_TITLE" --msgbox "You must provide your API port!" 8 78
            exit
        fi
    fi

}


debian_install() {
    apt-get update

    # install whiptail if not present
    [ `dpkg -l | grep '\swhiptail\s\s' | wc -l` -eq 1 ] || apt-get install whiptail -y
    
    [ `dpkg -l | grep '\ssoftware-properties-common\s\s' | wc -l` -eq 1 ] || apt-get install software-properties-common -y
    [ `dpkg -l | grep '\sdirmngr\s\s' | wc -l` -eq 1 ] || apt-get install dirmngr -y

    whiptail_ask
    
    ufw_config

    debian_install_nginx
    debian_install_certbot
    setup_certbot
    echo "HTTPS set up successfully!"
    exit
}

debian_install_nginx() {
    STEP=inginx

    apt-get install nginx -y || die install

    nginx_config
}

debian_install_certbot() {
    STEP=icertbot

    # install wget if not present
    [ `dpkg -l | grep '\swget\s\s' | wc -l` -eq 1 ] || apt-get install wget -y || die iwget

    wget https://dl.eff.org/certbot-auto || die dl
    chmod a+x certbot-auto || die chmod
    mv certbot-auto /usr/local/sbin/certbot || die mv
}


ubuntu_install() {
    apt-get update

    # install whiptail if not present
    [ `dpkg -l | grep '\swhiptail\s\s' | wc -l` -eq 1 ] || apt-get install whiptail -y
    
    [ `dpkg -l | grep '\ssoftware-properties-common\s\s' | wc -l` -eq 1 ] || apt-get install software-properties-common -y
    [ `dpkg -l | grep '\sdirmngr\s\s' | wc -l` -eq 1 ] || apt-get install dirmngr -y

    whiptail_ask
    
    ufw_config

    ubuntu_install_nginx
    ubuntu_install_certbot
    setup_certbot
    echo "HTTPS set up successfully!"
    exit
}

ubuntu_install_nginx() {
    STEP=inginx
    [ `dpkg -l | grep '\snginx\s\s' | wc -l` -eq 1 ] && return

    apt-get update || die aptupdate
    apt-get install nginx -y || die install

    nginx_config
}

ubuntu_install_certbot() {
    STEP=icertbot
    [ `dpkg -l | grep '\spython-certbot-nginx\s\s' | wc -l` -eq 1 ] && return

    apt-get install software-properties-common -y || die software-properties-common
    add-apt-repository ppa:certbot/certbot -y || die ppa
    apt-get update || die aptupdate
    apt-get install python-certbot-nginx -y || die install
}

nginx_config() {
    nginx_config_file > /etc/nginx/sites-enabled/default
}

nginx_config_file() {
    cat<<EOF
server {
listen 80;
server_name $DOMAIN;

  location / {
  
    add_header "Access-Control-Allow-Origin"  *;

    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto \$scheme;

    proxy_pass http://$DOMAIN:$PORT;
    proxy_read_timeout 90;
  }
}
EOF

}

ufw_config() {
  # autoconfigure ufw if found
  [ `dpkg -l | grep '\sufw\s\s' | wc -l` -eq 1 ] || return
  
  ufw allow 80
  ufw allow 443
  ufw allow 14265
}


die() {
    echo "!!! SOMETHING WENT WRONG ($DISTRO $STEP $1) !!!"
    exit
}

install
